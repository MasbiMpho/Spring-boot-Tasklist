name: Build, Test, and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-test-deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Clean up previous containers
        run: |
          docker rm -f taskdb_db springboot_tasklist_app || true

      - name: Create Docker network
        run: |
          docker network create spring_network || true

      - name: Run PostgreSQL Container
        run: |
          docker volume create postgres_data || true
          docker run -d \
            --name taskdb_db \
            --network spring_network \
            -v postgres_data:/var/lib/postgresql/data \
            -e POSTGRES_DB=${{ secrets.DB_NAME }} \
            -e POSTGRES_USER=${{ secrets.DB_USERNAME }} \
            -e POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -p 5432:5432 \
            postgres:17


      - name: Wait for PostgreSQL to be ready
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..30}; do
            if docker exec taskdb_db pg_isready -U ${{ secrets.DB_USERNAME }} > /dev/null; then
              echo "PostgreSQL is ready!"
              break
            else
              echo "Waiting... ($i)"
              sleep 2
            fi
          done

      - name: Build and Test with Maven
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/${{ secrets.DB_NAME }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.DB_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.DB_PASSWORD }}
          APP_PORT: ${{ secrets.VM_PORT }}
        run: |
          mvn clean test -Dspring-boot.run.arguments="--server.port=${APP_PORT}"

      - name: Run Spring Boot App Container
        run: |
          # Remove existing container if exists
          if [ "$(docker ps -aq -f name=springboot_tasklist_app)" ]; then
            docker rm -f springboot_tasklist_app
          fi

          docker run -d \
            --name springboot_tasklist_app \
            --network spring_network \
            -e SPRING_DATASOURCE_URL=jdbc:postgresql://taskdb_db:5432/${{ secrets.DB_NAME }} \
            -e SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }} \
            -e SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e SERVER_PORT=${{ secrets.APP_PORT }} \
            -p ${{ secrets.APP_PORT }}:${{ secrets.APP_PORT }} \
            ${{ secrets.DOCKER_USERNAME }}/springboot_tasklist_app:latest


      - name: Prepare deployment folder
        run: |
          if [ ! -d "$HOME/tasklist" ]; then
            echo "Folder ~/tasklist not found. Cloning fresh copy..."
            git clone https://github.com/${{ github.repository }} ~/tasklist
          else
            echo "Folder exists. Pulling latest changes..."
            cd ~/tasklist
            git pull origin main
          fi
  
      - name: Create .env file in deployment folder
        run: |
            cat <<EOF > ~/tasklist/.env
            POSTGRES_VERSION=17
            POSTGRES_DB=${{ secrets.DB_NAME }}
            POSTGRES_USER=${{ secrets.DB_USERNAME }}
            POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}
            POSTGRES_PORT=5432
            APP_PORT=${{ secrets.VM_PORT }}
            DB_URL=jdbc:postgresql://${{ secrets.HOST_IP }}:5432/${{ secrets.DB_NAME }}
            EOF
      
      
      - name: Run the application with Maven
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://${{ secrets.HOST_IP }}:5432/${{ secrets.DB_NAME }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.DB_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.DB_PASSWORD }}
          SERVER_PORT: ${{ secrets.VM_PORT }}
        run: |
          cd ~/tasklist
          mvn spring-boot:run

  
